# Run playbook like this:
#   ansible-playbook runtests.yml --extra-vars "path=/path/to/project[ repo=<repository url>][ branch=<name>][ coverage=<path>][ phpunit_debug=true]"
#
# Variables:
# - path:          required. Path to local configured project checkout.
#                  Will be used to grep some variables from configs
#                  and clone current branch to test if it is not specified.
# - repo:          optional. Repository URL to clone from.
#                  By default will clone from local bob path.
#                  Can be something like git@github.com:<user>/<repo>
#                  or anything else git can clone from.
# - branch:        optional. Branch name to test.
#                  By default will test current checked out branch.
# - coverage:      optional. Path for code coverage report.
# - phpunit_debug: optional. Turn on --debug key for phpunit.

- hosts: localhost
  connection: local
  vars:
    tmp_path: /tmp

    # get project path from command line: ansible-playbook runtests.yml --extra-vars "path=/path/to/project"
    project_path: "{{ path }}"
    # Repository URL to clone from.
    # By default clone from local path (and current branch).
    # Can be specified in command line "repo" variable,
    # this variable will be rewritten automatically in that case.
    repo: "{{ path }}"
    # Default branch name to test.
    # Can be specified by "branch" command line variable.
    branch: ""
    # Key for "git clone", will be defined if custom branch is set.
    branch_key: ""

    # Default coverage path, can be specified in command line.
    coverage: ""
    # --coverage-html key for phpunit, will be defined if coverage path is set in command line
    phpunit_coverage_key: ""
    # Default phpunit_debug flag, can be specified in command line.
    phpunit_debug: ""
    # --debug key for phpunit, will be defined if phpunit_debug flag is set in command line
    phpunit_debug_key: ""

    dev_ini_filename_local: "{{ project_path }}/application/configs/dev.ini"
    dev_ini_filename_repo: "{{ project_path }}/application/configs/_dev.ini"

    # Grep variables from .ini file, drop variable name and single/double quotes from value
    # and store result in ansible variable.
    # Lookups are run on local machine, so it's ok to grep vars from files that are not under git.
    # These vars then can be used on a remote host to run tests.
    # Similar result can be achieved in shell command:
    #   $ grep '^log.email\s*=' dev.ini | perl -pe "s/^log.email\s*=\s*['\"]?(.*?)['\"]?$/\1/"
    #
    # Too bad ansible can't read .ini files :(.

    # email to send report to:
    email: "{{ lookup('pipe', 'cat \"' + dev_ini_filename_local + '\" | grep \"^log.email\\s*=\" | sed -r \"s/^[a-zA-Z0-9.-]*\\s*=\\s*[\\'\\\\\"]?//\" | sed -r \"s/[\\'\\\\\"]?$//\" ') }}"

    # Developer's db settings, temporary db will be created here.
    # Connection to this db is actually made using user/password stored in .my.cnf file
    # of shell user who runs ansible. This user should have all privileges on given host.
    # Most developers probably has [localhost/root/password] here, so we're good.
    # If you are not one of them, you may want to create new user to run ansible playbooks
    # and setup db connection in .my.cnf.
    test_db_host: "{{ lookup('pipe', 'cat \"' + dev_ini_filename_local + '\" | grep \"^resources.multidb.maintest.host\\s*=\" | sed -r \"s/^[a-zA-Z0-9.-]*\\s*=\\s*[\\'\\\\\"]?//\" | sed -r \"s/[\\'\\\\\"]?$//\" ') }}"
    test_db_user: "{{ lookup('pipe', 'cat \"' + dev_ini_filename_local + '\" | grep \"^resources.multidb.maintest.username\\s*=\" | sed -r \"s/^[a-zA-Z0-9.-]*\\s*=\\s*[\\'\\\\\"]?//\" | sed -r \"s/[\\'\\\\\"]?$//\" ') }}"
    test_db_password: "{{ lookup('pipe', 'cat \"' + dev_ini_filename_local + '\" | grep \"^resources.multidb.maintest.password\\s*=\" | sed -r \"s/^[a-zA-Z0-9.-]*\\s*=\\s*[\\'\\\\\"]?//\" | sed -r \"s/[\\'\\\\\"]?$//\" ') }}"

    # Etalon test database.
    # We will dump it and run tests on our temporary db.
    etalon_db_host: "{{ lookup('pipe', 'cat \"' + dev_ini_filename_repo + '\" | grep \"^resources.multidb.maintest.host\\s*=\" | sed -r \"s/^[a-zA-Z0-9.-]*\\s*=\\s*[\\'\\\\\"]?//\" | sed -r \"s/[\\'\\\\\"]?$//\" ') }}"
    etalon_db_user: "{{ lookup('pipe', 'cat \"' + dev_ini_filename_repo + '\" | grep \"^resources.multidb.maintest.username\\s*=\" | sed -r \"s/^[a-zA-Z0-9.-]*\\s*=\\s*[\\'\\\\\"]?//\" | sed -r \"s/[\\'\\\\\"]?$//\" ') }}"
    etalon_db_password: "{{ lookup('pipe', 'cat \"' + dev_ini_filename_repo + '\" | grep \"^resources.multidb.maintest.password\\s*=\" | sed -r \"s/^[a-zA-Z0-9.-]*\\s*=\\s*[\\'\\\\\"]?//\" | sed -r \"s/[\\'\\\\\"]?$//\" ') }}"
    etalon_db_name: "{{ lookup('pipe', 'cat \"' + dev_ini_filename_repo + '\" | grep \"^resources.multidb.maintest.dbname\\s*=\" | sed -r \"s/^[a-zA-Z0-9.-]*\\s*=\\s*[\\'\\\\\"]?//\" | sed -r \"s/[\\'\\\\\"]?$//\" ') }}"
    # Store etalon dump here, we will cache it for a day.
    etalon_dayly_dump_file: "{{ tmp_path }}/runtests-{{ etalon_db_name }}-dump-{{ ansible_date_time.date }}.sql"


  tasks:

    - name: create temporary directory
      command: mktemp -d {{ tmp_path }}/runtests-XXX
      register: test_dir

    - name: set branch key for git clone if branch name is defined
      set_fact: branch_key=" -b {{ branch }}"
      when: branch != ""

    # cloning repository
    - name: clone current commit into test dir
      command: git clone --recursive {{ branch_key }} {{ repo }} {{ test_dir.stdout }}

    - name: get current commit hash
      shell: chdir={{ test_dir.stdout }}    git show --abbrev-commit --format=%h| head -n1
      register: commit_hash

    - name: install dependencies with ./composer.phar
      shell: chdir={{ test_dir.stdout }}    [ -f composer.phar ] && php composer.phar install || exit 0
    - name: install dependencies with system composer.phar if only composer.json is available
      shell: chdir={{ test_dir.stdout }}    [ -f composer.json ] && [ ! -f composer.phar ] && composer.phar install || exit 0

    # get git branch name
    - name: get git branch name
      shell: chdir={{ test_dir.stdout }}    git describe --all --exact-match 2>/dev/null | sed -nr 's/^(remotes\/|heads\/)?(.*)/\2/p'
      register: branch_name

    - name: copy dev.ini config
      copy: src={{ dev_ini_filename_local }} dest={{ test_dir.stdout }}/application/configs/dev.ini
    # ini_file module doesn't support .ini files without sections, so replace line with regexp
    - name: update db connection for cloned repository
      lineinfile: dest={{ test_dir.stdout }}/application/configs/dev.ini
                line="resources.multidb.maintest.dbname = {{ test_dir.stdout | basename }}"
                regexp="^resources.multidb.maintest.dbname"
                state=present


    # copy database
    - name: check if we have today's etalon dump
      shell: "[ -f {{ etalon_dayly_dump_file }} ] && echo 'OK' || echo ''"
      register: has_etalon_dump
    - name: drop old database dumps
      when: has_etalon_dump.stdout == ''
      shell: rm -f {{ tmp_path }}/runtests-{{ etalon_db_name }}-dump-*.sql
    - name: dump etalon db if there is no today's dump
      when: has_etalon_dump.stdout == ''
      mysql_db: login_host={{ etalon_db_host }}
                login_user={{ etalon_db_user }}
                login_password={{ etalon_db_password }}
                name={{ etalon_db_name }}
                encoding=utf-8
                state=dump
                target={{ etalon_dayly_dump_file }}
    - name: create temporary db for tests
      mysql_db: login_host={{ test_db_host }}
                name={{ test_dir.stdout | basename }}
                encoding=utf8
                state=present
    - name: import db dump
      mysql_db: login_host={{ test_db_host }}
                name={{ test_dir.stdout | basename }}
                encoding=utf-8
                state=import
                target={{ etalon_dayly_dump_file }}
    - name: grant privileges to test db
      mysql_user: login_host={{ test_db_host }}
                  host={{ test_db_host }}
                  name={{ test_db_user }}
                  priv={{ test_dir.stdout | basename }}.*:ALL
                  state=present

    - name: run migrations
      shell: chdir={{ test_dir.stdout }}/cli/migrationtool/    php migrate.php latest --env=unittest >> {{ test_dir.stdout }}/data/migrations.txt
      ignore_errors: true
      register: result_migrations

    # run tests

    - name: set coverage key if coverage path is defined
      set_fact: phpunit_coverage_key=" --coverage-html {{ coverage }}"
      when: coverage != ""
    - name: set debug key if phpunit_debug flag is defined
      set_fact: phpunit_debug_key=" --debug"
      when: phpunit_debug != ""
    - name: run phpunit
      shell: chdir={{ test_dir.stdout }}/tests/unit    php phpunit.php -c phpunit-jenkins.xml {{ phpunit_coverage_key }}{{ phpunit_debug_key }} >> {{ test_dir.stdout }}/data/phpunit.txt 2>&1
      register: result_phpunit
      ignore_errors: true


    # build email text
    - name: populate mail body (branch name)
      shell: 'echo "Branch: {{ commit_hash.stdout }} {{ branch_name.stdout }}\n" >> {{ test_dir.stdout }}/data/report.txt'
    - name: populate mail body (migrations overall result)
      shell: '( ( grep -sq SQLSTATE {{ test_dir.stdout }}/data/migrations.txt \
             ) && echo "Migrations: Failed" || echo "Migrations: OK" ) >> {{ test_dir.stdout }}/data/report.txt'
    - name: populate mail body (phpunit overall result)
      shell: '( ( ! grep -sq "^Tests:" {{ test_dir.stdout }}/data/phpunit.txt \
               || grep -sq FAILURE {{ test_dir.stdout }}/data/phpunit.txt \
             ) && echo "PHPUnit: Failed" || echo "PHPUnit: OK" ) >> {{ test_dir.stdout }}/data/report.txt'
    - name: populate mail body (migrations full result)
      shell: ( echo "\n\n===== Migrations =====\n" && cat {{ test_dir.stdout }}/data/migrations.txt ) >> {{ test_dir.stdout }}/data/report.txt
    - name: populate mail body (phpunit full result)
      shell: ( echo "\n\n===== PHPUnit =====\n" && cat {{ test_dir.stdout }}/data/phpunit.txt ) >> {{ test_dir.stdout }}/data/report.txt

    # grep silently return exit code 0 if found something.
    # get "Failed" string if any grep in () return 0.
    - name: get overall test results
      shell: ( ! grep -sq '^Tests:' {{ test_dir.stdout }}/data/phpunit.txt \
               || grep -sq FAILURE {{ test_dir.stdout }}/data/phpunit.txt \
               || grep -sq SQLSTATE {{ test_dir.stdout }}/data/migrations.txt \
             ) && echo Failed || echo OK
      register: result_overall

    # send results
    # (that way it seems impossible to send multiline email body
    #- name: mail results
      #mail: to={{ email }}
            #from={{ email }}
            #subject="[Ansible] Tests {{ result_overall.stdout }} - {{ commit_hash.stdout }} {{ branch_name.stdout }}"
            #charset=utf8
            #attach="{{ test_dir.stdout }}/data/report.txt {{ test_dir.stdout }}/data/migrations.txt {{ test_dir.stdout }}/data/phpunit.txt"

    - name: send mail
      shell: mail -s "[Ansible] Tests {{ result_overall.stdout }} - {{ commit_hash.stdout }} {{ branch_name.stdout }}" {{ email }} < {{ test_dir.stdout }}/data/report.txt

    # cleanup
    - name: cleanup temp dir
      command: rm -rf {{ test_dir.stdout }}
    # mysql_db module removes all user privileges on db removal, so drop temp db that way
    - name: remove temp db
      shell: echo 'drop database `{{ test_dir.stdout | basename }}`;' | mysql -h{{ test_db_host }}
